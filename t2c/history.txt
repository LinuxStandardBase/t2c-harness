14.11.2007 v.0.9
In this version:

- Reorganized the tools, so that the T2C Framework is not tied to the test suite now.
- Standalone version of a test is now generated by special make target with its own 
compiler options (without -O2 but with -g, for example). Compiler options for the 
debug version of the utility library have also been changed to produce more info for
the debugger.
- The test purposes, startup and cleanup functions are now executed in the same process 
for a standalone test (it is easier for gdb to handle).
- Added support for outputting hyperlinks to the journal instead of plain req ids.
- Added ABORT_UNSUPPORTED() macro.

-------------------------------------------------------------------------------

22.08.2007 v.0.8.1 (mainly a bugfix release)
In this version:

- [FIXED] Cfg-file was loaded incorrectly if it did not end with a newline.
- [FIXED] Memory leak in t2c_parse_decl().
- "<<< REQ NOT FOUND >>>" is now output instead of an empty string when a requirement id is not found in the catalogue.
- "//"-style comments are now used in the generated C-files.
- Added loading version-dependent compiler options from "$T2C_ROOT/cc_special_flags" in the T2C makefiles and the generated makefiles.
(This is used to get a workaround for the following problem. For the present lsbcc does not properly handle stack control interfaces (e.g. __stack_chk_fail) that gcc 4.1.0 or newer inserts in the object files on Ubuntu 7.04 (x86_64) etc. All one can do now is to turn stack protection off for these gcc versions.) 
See the description of the COMPILER_FLAGS parameter (item 3.2).

-------------------------------------------------------------------------------

22.06.2007 v.0.8.
In this version:

- Added support for standalone (i.e. without TET) test execution and debugging. (See item 6 in the documentation for details.)
- Each test purpose is now executed in a separate process (see appendix 1, item 1.5).
- The user can now specify how long any single test (test purpose) is allowed to run.

Minor changes:
- The list of test targets is now output to the TET journal for each test.
- [FIXED] HAS_EXT_PREFIX() worked wrong for IDs like "g_strip_context.01".
- Several minor fixes.

-------------------------------------------------------------------------------

29.05.2007 v.0.7 alpha.
In this version:

- The recommended package structure has changed (see pkg-struct.txt).
- Command-line parameters for T2C have changed. Now t2c takes only 3 params maximum: directory where tet_scen resides, subsuite directory and path to a cfg file. (See also new recommended package structure.)
- All the paths are considered relative to $T2C_ROOT. (If T2C_ROOT environment variable is not defined, t2c will display an appropriate message and then exit.)

- Added T2C_GET_DATA_PATH(rel_path) macro that allows to get the path to the test data (see appendix 4 in the docs).

- Common include directory of a subsuite is now added to the include search path ("-I..." in the compiler options).

- Requirement text now goes to the TET journal in case of failure (if the requirement catalogue is provided). 
The requirement catalogue is supposed to be generated by the reqtools.js script from the marked-up html.

- REQ macro definition has been overhauled completely. Its parameters remain the same though.

- The recommended package structure is now described in a separate file, pkg-struct.txt.

Minor changes:
- <PURPOSE> section is now optional.
- "ext" requirements are not checked by default. Use CHECK_EXT_REQS preprocessor symbol to turn them on. NO_EXT_REQ_CHECK exists no more.

-------------------------------------------------------------------------------

27.04.2007 v.0.6 alpha.
In this version:
- REQs with TODO_REQ() as an expression are now ignored (no record in the TET journal).
- Added ABORT_TEST_PURPOSE() macro (see t2c/include/t2c.h).
- INIT_FAILED macro now has a parameter: a message to be displayed (see t2c/include/t2c.h).
- Changed messages that REQ macro writes to TET journal.

-------------------------------------------------------------------------------

16.04.2007 v.0.5 alpha.
In this version:
- Added INIT_FAILED() macro. It's recommended to use it instead of setting init_failed to TRUE manually.
- Added <FINALLY> subsection support (see readme files).
- Changed REQ definition. Requirements with "app."-prefixed IDs now get a different fail message. If such requirement fails, the result will be set to UNRESOLVED (instead of FAIL before).
- Some minor improvements.

-------------------------------------------------------------------------------

05.04.2007 v.0.4 alpha.
In this version:
- It is possible now to cancel the test case execution when the startup procedure fails (see the description of the 'init_failed' variable in the documentation.)
- Changed default compiler options for the generated tests (_POSIX_SOURCE => _POSIX_C_SOURCE=200112L etc.)
- "Checking requirements" => "Checked requirements" in REQ definition.
- Changed default compiler for T2C and samples from gcc to lsbcc. LSB SDK (http://www.linux-foundation.org/en/Downloads) is now a prerequisite.

- Minor cosmetic improvements.

-------------------------------------------------------------------------------

20.03.2007 v.0.3 alpha.
In this version:
- The generator is now named T2C ("Template-to-Code"). It accepts both .t2c and .ras files. t2c is a recommended extension for the input files. The layout of .t2c and .ras files remains the same. 
- [FIXED] Some comments with preprocessor directives in the middle were not considered comments.
- The preprocessor directives now require a whitespace character after them.
- The path to the corresponding t2c-file is copied to the leading comment in the generated .c-file. This path is also output via TRACE() to the TET journal and/or to stderr.

-------------------------------------------------------------------------------

15.03.2007 v.0.2 alpha.
In this version:
- The command-line call syntax of the generator is different now (see the documentation).
- Compiler and linker flags can only be specified in a configuration file. The path to this file (relative to current directory) is an optional command-line parameter of the generator.
- The compiler to be used to build the tests can also be specified in this configuration file.
- The TET_SCEN_RECORD parameter in the config. file controls whether a record (":include:...") should be placed in tet_scen.
- [FIXED] The previous records func_scen file is now cleared before new records are added.
- Added support for the VERBOSE TET variable that controls the output of trace messages.
- [FIXED] Some preprocessor directives (#ifdef etc.) were considered comments.

-------------------------------------------------------------------------------

07.03.2007 v.0.1 alpha.
Initial alpha version.
